[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CO2 Emissions",
    "section": "",
    "text": "emissions_data &lt;- read_csv(\"emissions.csv\") %&gt;% \n  janitor::clean_names() %&gt;%\n  group_by(commodity, year) %&gt;%\n  summarize(total_emissions = sum(total_emissions_mt_co2e))\n\nRows: 12551 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): parent_entity, parent_type, commodity, production_unit\ndbl (3): year, production_value, total_emissions_MtCO2e\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n`summarise()` has grouped output by 'commodity'. You can override using the `.groups` argument.\n\ncommodities &lt;- unique(emissions_data$commodity)\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\nlibrary(tidyverse)\n\nemissions_data &lt;- read_csv(\"emissions.csv\") %&gt;% \n  janitor::clean_names() %&gt;%\n  group_by(commodity, year) %&gt;%\n  summarize(total_emissions = sum(total_emissions_mt_co2e))\n\ncommodities &lt;- unique(emissions_data$commodity)\n\nui &lt;- page_sidebar(theme = theme,\n                   sidebar = sidebar(\n                     checkboxGroupInput(\"commodit\", \"Choose which commodities should be represented in the plot\", commodities)\n                   ),\n                   mainPanel(plotOutput(\"plot\"))\n)\n\nserver &lt;- function(input, output, session){\n  output$plot &lt;- renderPlot({\n    data &lt;- emissions_data %&gt;%\n      filter(commodity %in% input$commodit)\n    ggplot(data, aes(x = year, y = total_emissions)) +\n      geom_smooth(aes(color = commodity),se=FALSE) +\n      theme_minimal() +\n      labs(\n        x = \"Year\",\n        y = \"Total emissions of co2 in million tonnes \",\n        title = \"Total emissions of co2 based on source\"\n      )\n  })\n}\n\nshinyApp(ui, server)\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n   output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)"
  }
]