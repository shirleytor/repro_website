---
title: "CO2 Emissions"
filters:
  - shinylive
author: "Shirley Toribio"
format: html
editor: visual
---

```{r, include=FALSE, warning=FALSE, results='hide'}
library(tidyverse)
library(janitor)
```

```{r}
emissions_data <- read_csv("emissions.csv") %>% 
  janitor::clean_names() %>%
  group_by(commodity, year) %>%
  summarize(total_emissions = sum(total_emissions_mt_co2e))
commodities <- unique(emissions_data$commodity)
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)
library(tidyverse)

emissions_data <- read_csv("emissions.csv") %>% 
  janitor::clean_names() %>%
  group_by(commodity, year) %>%
  summarize(total_emissions = sum(total_emissions_mt_co2e))

commodities <- unique(emissions_data$commodity)

ui <- page_sidebar(theme = theme,
                   sidebar = sidebar(
                     checkboxGroupInput("commodit", "Choose which commodities should be represented in the plot", commodities)
                   ),
                   mainPanel(plotOutput("plot"))
)

server <- function(input, output, session){
  output$plot <- renderPlot({
    data <- emissions_data %>%
      filter(commodity %in% input$commodit)
    ggplot(data, aes(x = year, y = total_emissions)) +
      geom_smooth(aes(color = commodity),se=FALSE) +
      theme_minimal() +
      labs(
        x = "Year",
        y = "Total emissions of co2 in million tonnes ",
        title = "Total emissions of co2 based on source"
      )
  })
}

shinyApp(ui, server)

## file: emissions.csv
{{< include emissions.csv >}}
```

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
library(shiny)
library(bslib)

# Define UI for app that draws a histogram ----
ui <- page_sidebar(
  sidebar = sidebar(open = "open",
    numericInput("n", "Sample count", 100),
    checkboxInput("pause", "Pause", FALSE),
  ),
  plotOutput("plot", width=1100)
)

server <- function(input, output, session) {
  data <- reactive({
    input$resample
    if (!isTRUE(input$pause)) {
      invalidateLater(1000)
    }
    rnorm(input$n)
  })
   output$plot <- renderPlot({
    hist(data(),
      breaks = 40,
      xlim = c(-2, 2),
      ylim = c(0, 1),
      lty = "blank",
      xlab = "value",
      freq = FALSE,
      main = ""
    )
    
    x <- seq(from = -2, to = 2, length.out = 500)
    y <- dnorm(x)
    lines(x, y, lwd=1.5)
    
    lwd <- 5
    abline(v=0, col="red", lwd=lwd, lty=2)
    abline(v=mean(data()), col="blue", lwd=lwd, lty=1)

    legend(legend = c("Normal", "Mean", "Sample mean"),
      col = c("black", "red", "blue"),
      lty = c(1, 2, 1),
      lwd = c(1, lwd, lwd),
      x = 1,
      y = 0.9
    )
  }, res=140)
}

# Create Shiny app ----
shinyApp(ui = ui, server = server)
```